{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\next-struc\\\\components\\\\Search.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TextField } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux';\nimport React from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction sleep(delay = 0) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function Search() {\n  const dispatch = useDispatch();\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const loading = open && options.length === 0;\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      const response = await fetch('https://country.register.gov.uk/records.json?page-size=5000');\n      await sleep(1e3); // For demo purposes.\n\n      const countries = await response.json();\n\n      if (active) {\n        setOptions(Object.keys(countries).map(key => countries[key].item[0]));\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(Autocomplete, {\n    id: \"asynchronous-demo\",\n    style: {\n      width: 100\n    },\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    getOptionLabel: option => option.name,\n    options: options,\n    loading: loading,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Asynchronous\",\n      variant: \"outlined\",\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }\n        }, loading ? __jsx(CircularProgress, {\n          color: \"inherit\",\n          size: 20,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 44\n          }\n        }) : null, params.InputProps.endAdornment)\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["D:/React/next-struc/components/Search.tsx"],"names":["TextField","useDispatch","React","Autocomplete","CircularProgress","sleep","delay","Promise","resolve","setTimeout","Search","dispatch","open","setOpen","useState","options","setOptions","loading","length","useEffect","active","undefined","response","fetch","countries","json","Object","keys","map","key","item","width","option","value","name","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import { TextField } from \"@material-ui/core\"\r\nimport { useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport React from \"react\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\ninterface CountryType {\r\n    name: string;\r\n}\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\nexport default function Search() {\r\n    const dispatch = useDispatch();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<CountryType[]>([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            const response = await fetch('https://country.register.gov.uk/records.json?page-size=5000');\r\n            await sleep(1e3); // For demo purposes.\r\n            const countries = await response.json();\r\n\r\n            if (active) {\r\n                setOptions(Object.keys(countries).map((key) => countries[key].item[0]) as CountryType[]);\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n    return (\r\n        <Autocomplete\r\n            id=\"asynchronous-demo\"\r\n            style={{ width: 100 }}\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            getOptionSelected={(option, value) => option.name === value.name}\r\n            getOptionLabel={(option) => option.name}\r\n            options={options}\r\n            loading={loading}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Asynchronous\"\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}