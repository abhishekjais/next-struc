{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\next-struc\\\\components\\\\Search.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { TextField } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport React from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nexport default function Search() {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.product);\n  const [options, setOptions] = React.useState([]);\n  React.useEffect(() => {}, []);\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const handleChange = value => {\n    console.log(value, 'çhange');\n  };\n\n  return (// <ClickAwayListener onClickAway={(e) => handleClickAway(e, index)} >\n    __jsx(Autocomplete, {\n      getOptionSelected: (option, value) => option.name === value.name,\n      getOptionLabel: option => option.name,\n      options: data && data.length > 0 ? data : [],\n      blurOnSelect: true,\n      freeSolo: true,\n      onChange: (event, newValue) => handleChange(newValue && newValue.hasOwnProperty('name') ? newValue.name : '') // inputValue={}\n      ,\n      onInputChange: (newValue, reason) => {\n        if (reason.toLowerCase() === 'input') {\n          handleChange(newValue);\n        } else if (reason.toLowerCase() === 'clear') {\n          handleChange('');\n        }\n      },\n      renderInput: params => __jsx(TextField, _extends({}, params, {\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 38\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }) // </ClickAwayListener>\n\n  );\n}","map":{"version":3,"sources":["D:/React/next-struc/components/Search.tsx"],"names":["TextField","useDispatch","useSelector","React","Autocomplete","Search","dispatch","data","state","product","options","setOptions","useState","useEffect","open","handleChange","value","console","log","option","name","length","event","newValue","hasOwnProperty","reason","toLowerCase","params"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA6C,mBAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAOA,eAAe,SAASC,MAAT,GAAkB;AAC7B,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,IAAS,GAAGL,WAAW,CAAEM,KAAD,IAAsBA,KAAK,CAACC,OAA7B,CAA7B;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,KAAK,CAACS,QAAN,CAA8B,EAA9B,CAA9B;AAEAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM,CAErB,CAFD,EAEG,EAFH;AAIAV,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,QAAI,CAACC,IAAL,EAAW;AACPH,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH;AACJ,GAJD,EAIG,CAACG,IAAD,CAJH;;AAKA,QAAMC,YAAY,GAAIC,KAAD,IAAgB;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAmB,QAAnB;AACH,GAFD;;AAGA,SACI;AACA,UAAC,YAAD;AACI,MAAA,iBAAiB,EAAE,CAACG,MAAD,EAAcH,KAAd,KAA6BG,MAAM,CAACC,IAAP,KAAgBJ,KAAK,CAACI,IAD1E;AAEI,MAAA,cAAc,EAAGD,MAAD,IAAiBA,MAAM,CAACC,IAF5C;AAGI,MAAA,OAAO,EAAEb,IAAI,IAAIA,IAAI,CAACc,MAAL,GAAc,CAAtB,GAA0Bd,IAA1B,GAAiC,EAH9C;AAII,MAAA,YAAY,MAJhB;AAKI,MAAA,QAAQ,EAAE,IALd;AAMI,MAAA,QAAQ,EAAE,CAACe,KAAD,EAAQC,QAAR,KAAqBR,YAAY,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAZ,GAA8CD,QAAQ,CAACH,IAAvD,GAA8D,EAA/D,CAN/C,CAOI;AAPJ;AAQI,MAAA,aAAa,EAAE,CAACG,QAAD,EAAWE,MAAX,KAAsB;AAEjC,YAAIA,MAAM,CAACC,WAAP,OAAyB,OAA7B,EAAsC;AAClCX,UAAAA,YAAY,CAACQ,QAAD,CAAZ;AACH,SAFD,MAEO,IAAIE,MAAM,CAACC,WAAP,OAAyB,OAA7B,EAAsC;AACzCX,UAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;AACJ,OAfL;AAgBI,MAAA,WAAW,EAAGY,MAAD,IAAY,MAAC,SAAD,eAAeA,MAAf;AAAuB,QAAA,MAAM,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAhB7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAoBI;;AApBJ;AAsBH","sourcesContent":["import { TextField, ClickAwayListener } from \"@material-ui/core\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport React from \"react\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { RootState } from \"../store/reducer/rootReducer\";\r\ninterface CountryType {\r\n    name: string;\r\n}\r\n\r\n\r\nexport default function Search() {\r\n    const dispatch = useDispatch();\r\n    const data: any = useSelector((state: RootState) => state.product);\r\n\r\n    const [options, setOptions] = React.useState<CountryType[]>([]);\r\n\r\n    React.useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n    const handleChange = (value: any) => {\r\n        console.log(value, 'çhange');\r\n    }\r\n    return (\r\n        // <ClickAwayListener onClickAway={(e) => handleClickAway(e, index)} >\r\n        <Autocomplete\r\n            getOptionSelected={(option: any, value: any) => option.name === value.name}\r\n            getOptionLabel={(option: any) => option.name}\r\n            options={data && data.length > 0 ? data : []}\r\n            blurOnSelect\r\n            freeSolo={true}\r\n            onChange={(event, newValue) => handleChange(newValue && newValue.hasOwnProperty('name') ? newValue.name : '')}\r\n            // inputValue={}\r\n            onInputChange={(newValue, reason) => {\r\n\r\n                if (reason.toLowerCase() === 'input') {\r\n                    handleChange(newValue)\r\n                } else if (reason.toLowerCase() === 'clear') {\r\n                    handleChange('')\r\n                }\r\n            }}\r\n            renderInput={(params) => <TextField {...params} margin=\"normal\" />}\r\n        />\r\n        // </ClickAwayListener>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}