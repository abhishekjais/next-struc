{"ast":null,"code":"import Router from 'next/router';\nimport actions from '../store/actions';\nimport { getCookie } from '../utils/cookie'; // checks if the page is being loaded on the server, and if so, get auth token from the cookie:\n\nexport default function (ctx) {\n  if (ctx.isServer) {\n    if (ctx.req.headers.cookie) {\n      ctx.store.dispatch(actions.reauthenticate(getCookie('token', ctx.req)));\n    }\n  } else {\n    const token = ctx.store.getState().authentication.token;\n    ctx.store.dispatch(actions.getProduct({}, 'product'));\n\n    if (token && (ctx.pathname === '/signin' || ctx.pathname === '/signup')) {\n      setTimeout(function () {\n        Router.push('/');\n      }, 0);\n    }\n  }\n}","map":{"version":3,"sources":["D:/React/next-struc/utils/initialize.tsx"],"names":["Router","actions","getCookie","ctx","isServer","req","headers","cookie","store","dispatch","reauthenticate","token","getState","authentication","getProduct","pathname","setTimeout","push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,iBAA1B,C,CAEA;;AACA,eAAe,UAAUC,GAAV,EAAoB;AAE/B,MAAIA,GAAG,CAACC,QAAR,EAAkB;AACd,QAAID,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,MAApB,EAA4B;AACxBJ,MAAAA,GAAG,CAACK,KAAJ,CAAUC,QAAV,CAAmBR,OAAO,CAACS,cAAR,CAAuBR,SAAS,CAAC,OAAD,EAAUC,GAAG,CAACE,GAAd,CAAhC,CAAnB;AACH;AACJ,GAJD,MAIO;AACH,UAAMM,KAAK,GAAGR,GAAG,CAACK,KAAJ,CAAUI,QAAV,GAAqBC,cAArB,CAAoCF,KAAlD;AACAR,IAAAA,GAAG,CAACK,KAAJ,CAAUC,QAAV,CAAmBR,OAAO,CAACa,UAAR,CAAmB,EAAnB,EAAuB,SAAvB,CAAnB;;AAEA,QAAIH,KAAK,KAAKR,GAAG,CAACY,QAAJ,KAAiB,SAAjB,IAA8BZ,GAAG,CAACY,QAAJ,KAAiB,SAApD,CAAT,EAAyE;AACrEC,MAAAA,UAAU,CAAC,YAAY;AACnBhB,QAAAA,MAAM,CAACiB,IAAP,CAAY,GAAZ;AACH,OAFS,EAEP,CAFO,CAAV;AAGH;AACJ;AAGJ","sourcesContent":["import Router from 'next/router';\nimport actions from '../store/actions';\nimport { getCookie } from '../utils/cookie';\n\n// checks if the page is being loaded on the server, and if so, get auth token from the cookie:\nexport default function (ctx: any) {\n\n    if (ctx.isServer) {\n        if (ctx.req.headers.cookie) {\n            ctx.store.dispatch(actions.reauthenticate(getCookie('token', ctx.req)));\n        }\n    } else {\n        const token = ctx.store.getState().authentication.token;\n        ctx.store.dispatch(actions.getProduct({}, 'product'))\n\n        if (token && (ctx.pathname === '/signin' || ctx.pathname === '/signup')) {\n            setTimeout(function () {\n                Router.push('/');\n            }, 0);\n        }\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}