{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\next-struc\\\\pages\\\\products\\\\[catType]\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport middleware from \"../../../middlewares/middleware\";\nimport Product from \"../../../module/Product/product\";\nimport Layout from \"../../../components/Layout\";\nimport { Grid, Card, CardActionArea, CardMedia, CardContent, Typography, makeStyles } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"block\",\n    textTransform: 'uppercase'\n  },\n  card: {\n    maxWidth: 400,\n    margin: \"auto\",\n    // height: '120px',\n    transition: \"0.3s\",\n    // backgroundColor: \"#792141\",\n    boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\",\n    \"&:hover\": {\n      boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\"\n    }\n  },\n  content: {\n    textAlign: \"center\",\n    padding: 10,\n    fontSize: '20px',\n    fontWeight: 600\n  },\n  rootContainer: {\n    display: \"flex\",\n    width: \"100%\",\n    padding: \"10px 0px 17px 0px\",\n    marginBottom: 10\n  },\n  cardpadding: {\n    padding: '0 30px 0 0',\n    '&:last-child': {\n      padding: '0 30px 0 0'\n    }\n  },\n  media: {\n    height: 140,\n    paddingTop: '56.25%' // 16:9\n\n  }\n}));\nexport default function CategoryType(props) {\n  const classes = useStyles();\n  const {\n    data\n  } = props;\n  return __jsx(Layout, {\n    title: \"Product\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, data.length && data.map((item, index) => // (index % 3 === 0 &&\n  //     <Grid item container direction=\"row\" justify=\"space-between\" className={classes.rootContainer}>)\n  __jsx(Grid, {\n    item: true,\n    xs: true,\n    className: classes.root,\n    key: 'cat' + index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, __jsx(CardActionArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, __jsx(CardMedia, {\n    className: classes.media,\n    image: item.image,\n    title: \"Contemplative Reptile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  }), __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 33\n    }\n  }, item.title), __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 33\n    }\n  }, \"$\", item.price))))) // </Grid>\n  ));\n}\nexport const getServerSideProps = async ctx => {\n  var _ctx$query;\n\n  const req = ctx === null || ctx === void 0 ? void 0 : ctx.req;\n  const res = ctx === null || ctx === void 0 ? void 0 : ctx.res;\n  await middleware.apply(req, res);\n  const value = ctx === null || ctx === void 0 ? void 0 : (_ctx$query = ctx.query) === null || _ctx$query === void 0 ? void 0 : _ctx$query.catType;\n  const query = value ? {\n    category: value\n  } : {};\n  const product = await Product.find(query); // Pass data to the page via props\n\n  return {\n    props: {\n      data: JSON.parse(JSON.stringify(product))\n    }\n  };\n};","map":{"version":3,"sources":["D:/React/next-struc/pages/products/[catType]/index.tsx"],"names":["middleware","Product","Layout","Grid","Card","CardActionArea","CardMedia","CardContent","Typography","makeStyles","useStyles","theme","root","display","textTransform","card","maxWidth","margin","transition","boxShadow","content","textAlign","padding","fontSize","fontWeight","rootContainer","width","marginBottom","cardpadding","media","height","paddingTop","CategoryType","props","classes","data","length","map","item","index","image","title","price","getServerSideProps","ctx","req","res","apply","value","query","catType","category","product","find","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import { NextPageContext, NextApiRequest, NextApiResponse, GetServerSideProps } from \"next\"\r\nimport middleware from \"../../../middlewares/middleware\";\r\nimport Product from \"../../../module/Product/product\";\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Grid, Card, CardActionArea, CardMedia, CardContent, Typography, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n    root: {\r\n        display: \"block\",\r\n        textTransform: 'uppercase'\r\n    },\r\n    card: {\r\n        maxWidth: 400,\r\n        margin: \"auto\",\r\n        // height: '120px',\r\n        transition: \"0.3s\",\r\n        // backgroundColor: \"#792141\",\r\n        boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\"\r\n        }\r\n    },\r\n    content: {\r\n        textAlign: \"center\",\r\n        padding: 10,\r\n        fontSize: '20px',\r\n        fontWeight: 600\r\n    },\r\n    rootContainer: {\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n        padding: \"10px 0px 17px 0px\",\r\n        marginBottom: 10\r\n    },\r\n    cardpadding: {\r\n        padding: '0 30px 0 0',\r\n        '&:last-child': {\r\n            padding: '0 30px 0 0',\r\n        }\r\n    },\r\n    media: {\r\n        height: 140,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n}));\r\nexport default function CategoryType(props: any) {\r\n    const classes = useStyles();\r\n    const { data } = props;\r\n    return (\r\n        <Layout title=\"Product\">\r\n            {data.length && data.map((item: any, index: number) => (\r\n                // (index % 3 === 0 &&\r\n                //     <Grid item container direction=\"row\" justify=\"space-between\" className={classes.rootContainer}>)\r\n\r\n                <Grid item xs className={classes.root} key={'cat' + index}>\r\n                    <Card >\r\n                        <CardActionArea>\r\n                            <CardMedia\r\n                                className={classes.media}\r\n                                image={item.image}\r\n                                title=\"Contemplative Reptile\"\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                    {item.title}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    ${item.price}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Grid>\r\n                // </Grid>\r\n            ))}\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\r\n    const req = ctx?.req as NextApiRequest;\r\n    const res = ctx?.res as NextApiResponse;\r\n    await middleware.apply(req, res);\r\n    const value = ctx?.query?.catType;\r\n    const query = value ? { category: value } : {};\r\n    const product = await Product.find(query);\r\n    // Pass data to the page via props\r\n    return { props: { data: JSON.parse(JSON.stringify(product)) } }\r\n}"]},"metadata":{},"sourceType":"module"}