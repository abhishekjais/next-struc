{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer, { initialState } from './reducer/rootReducer';\nconst dev = true;\nexport default ((state = initialState) => {\n  const middlewares = dev ? [thunkMiddleware] : [];\n  return createStore(rootReducer, _objectSpread({}, state), compose(applyMiddleware(...middlewares)));\n});","map":{"version":3,"sources":["D:/React/next-struc/store/store.tsx"],"names":["thunkMiddleware","createStore","applyMiddleware","compose","rootReducer","initialState","dev","state","middlewares"],"mappings":";;;;;;AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,SACIC,WADJ,EAEIC,eAFJ,EAGIC,OAHJ,QAKO,OALP;AAMA,OAAOC,WAAP,IAAsBC,YAAtB,QAA0C,uBAA1C;AAEA,MAAMC,GAAY,OAAlB;AAIA,gBAAe,CAACC,KAAK,GAAGF,YAAT,KAAiC;AAC5C,QAAMG,WAAW,GAAGF,GAAG,GAAG,CAACN,eAAD,CAAH,GAAuB,EAA9C;AACA,SAAOC,WAAW,CAACG,WAAD,oBAAmBG,KAAnB,GAA4BJ,OAAO,CAACD,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAAnC,CAAlB;AACH,CAHD","sourcesContent":["import thunkMiddleware from 'redux-thunk';\r\nimport {\r\n    createStore,\r\n    applyMiddleware,\r\n    compose,\r\n    Store as ReduxStore,\r\n} from 'redux';\r\nimport rootReducer, { initialState } from './reducer/rootReducer';\r\n\r\nconst dev: boolean = process.env.NODE_ENV !== 'production';\r\n\r\nexport type Store = ReduxStore<typeof initialState>;\r\n\r\nexport default (state = initialState): Store => {\r\n    const middlewares = dev ? [thunkMiddleware] : [];\r\n    return createStore(rootReducer, { ...state }, compose(applyMiddleware(...middlewares)));\r\n};"]},"metadata":{},"sourceType":"module"}