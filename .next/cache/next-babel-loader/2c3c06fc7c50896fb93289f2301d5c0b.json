{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\next-struc\\\\pages\\\\products\\\\[catType]\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../../components/Layout\";\nimport { Grid, Card, CardActionArea, CardMedia, CardContent, Typography, makeStyles, Divider } from \"@material-ui/core\";\nimport Link from \"next/link\";\nvar useStyles = makeStyles(function () {\n  return {\n    root: {\n      display: \"inline-flex\",\n      textTransform: 'uppercase'\n    },\n    card: {\n      maxWidth: 400,\n      // margin: \"auto\",\n      // height: '120px',\n      transition: \"0.3s\",\n      // backgroundColor: \"#792141\",\n      boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\",\n      \"&:hover\": {\n        boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\"\n      }\n    },\n    content: {\n      textAlign: \"center\",\n      padding: 10,\n      // fontSize: '20px',\n      fontWeight: 600\n    },\n    rootContainer: {\n      display: \"inline-flex\",\n      width: \"345px\",\n      padding: \"17px 40px 17px 22px\",\n      marginBottom: 10,\n      height: 400\n    },\n    cardpadding: {\n      padding: '0 30px 0 0',\n      '&:last-child': {\n        padding: '0 30px 0 0'\n      }\n    },\n    media: {\n      height: 250,\n      width: 300,\n      // paddingTop: '56.25%', // 16:9,\n      backgroundSize: 'contain'\n    }\n  };\n});\nexport var __N_SSP = true;\nexport default function CategoryType(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n  var data = props.data;\n  return __jsx(Layout, {\n    title: \"Product\",\n    center: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, data.length && data.map(function (item, index) {\n    return __jsx(Link, {\n      href: \"/products/detail/[id]\",\n      as: \"/products/detail/\".concat(item._id),\n      key: 'list' + index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, __jsx(Grid, {\n      item: true,\n      className: classes.rootContainer,\n      key: 'cat' + index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 24\n      }\n    }, __jsx(Card, {\n      className: classes.card,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, __jsx(CardActionArea, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, __jsx(CardMedia, {\n      className: classes.media,\n      image: item.image,\n      title: item.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }\n    }), __jsx(CardContent, {\n      className: classes.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 33\n      }\n    }, __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 37\n      }\n    }), item.title, __jsx(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 37\n      }\n    }, \"$\", item.price)))))));\n  }));\n}\n\n_s(CategoryType, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CategoryType;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryType\");","map":{"version":3,"sources":["D:/React/next-struc/pages/products/[catType]/index.tsx"],"names":["Layout","Grid","Card","CardActionArea","CardMedia","CardContent","Typography","makeStyles","Divider","Link","useStyles","root","display","textTransform","card","maxWidth","transition","boxShadow","content","textAlign","padding","fontWeight","rootContainer","width","marginBottom","height","cardpadding","media","backgroundSize","CategoryType","props","classes","data","length","map","item","index","_id","image","title","price"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse, GetServerSideProps } from \"next\"\r\nimport middleware from \"../../../middlewares/middleware\";\r\nimport Product from \"../../../module/Product/product\";\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Grid, Card, CardActionArea, CardMedia, CardContent, Typography, makeStyles, Divider } from \"@material-ui/core\";\r\nimport Link from \"next/link\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: \"inline-flex\",\r\n        textTransform: 'uppercase'\r\n    },\r\n    card: {\r\n        maxWidth: 400,\r\n        // margin: \"auto\",\r\n        // height: '120px',\r\n        transition: \"0.3s\",\r\n        // backgroundColor: \"#792141\",\r\n        boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\"\r\n        }\r\n    },\r\n    content: {\r\n        textAlign: \"center\",\r\n        padding: 10,\r\n        // fontSize: '20px',\r\n        fontWeight: 600\r\n    },\r\n    rootContainer: {\r\n        display: \"inline-flex\",\r\n        width: \"345px\",\r\n        padding: \"17px 40px 17px 22px\",\r\n        marginBottom: 10,\r\n        height: 400\r\n    },\r\n    cardpadding: {\r\n        padding: '0 30px 0 0',\r\n        '&:last-child': {\r\n            padding: '0 30px 0 0',\r\n        }\r\n    },\r\n    media: {\r\n        height: 250,\r\n        width: 300,\r\n        // paddingTop: '56.25%', // 16:9,\r\n        backgroundSize: 'contain'\r\n    },\r\n}));\r\nexport default function CategoryType(props: any) {\r\n    const classes = useStyles();\r\n    const { data } = props;\r\n    return (\r\n        <Layout title=\"Product\" center={true}>\r\n            {data.length && data.map((item: any, index: number) => (\r\n                <Link href=\"/products/detail/[id]\" as={`/products/detail/${item._id}`} key={'list' + index}>\r\n                    <a><Grid item className={classes.rootContainer} key={'cat' + index}>\r\n                        <Card className={classes.card} >\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                    className={classes.media}\r\n                                    image={item.image}\r\n                                    title={item.title}\r\n                                />\r\n                                <CardContent className={classes.content}>\r\n                                    <Divider />\r\n                                    {/* <Typography gutterBottom variant=\"h5\" component=\"h5\"> */}\r\n                                    {item.title}\r\n                                    {/* </Typography> */}\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                        ${item.price}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                    </Grid></a>\r\n                </Link>\r\n            ))}\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\r\n    const req = ctx?.req as NextApiRequest;\r\n    const res = ctx?.res as NextApiResponse;\r\n    await middleware.apply(req, res);\r\n    const value = ctx?.query?.catType;\r\n    const query = value ? { category: value } : {};\r\n    const product = await Product.find(query);\r\n    // Pass data to the page via props\r\n    return { props: { data: JSON.parse(JSON.stringify(product)) } }\r\n}"]},"metadata":{},"sourceType":"module"}