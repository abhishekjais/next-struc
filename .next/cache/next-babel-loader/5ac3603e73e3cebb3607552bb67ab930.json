{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { PRO_LIST } from './ActionsTypes';\n// const getProduct = (query: any, type: any) => {\n//     return (dispatch: any) => {\n//         axios.get(`https://fakestoreapi.com/products`)\n//             .then((response) => {\n//                 dispatch({ type: PRO_LIST, payload: response.data });\n//             })\n//             .catch((error) => {\n//                 console.log(error, 'error.response');\n//                 switch (error.response.status) {\n//                     case 401:\n//                         Router.push('/');\n//                         break;\n//                     case 422:\n//                         alert(error.response.data.meta.message);\n//                         break;\n//                     case 500:\n//                         alert('Interval server error! Try again!');\n//                     case 503:\n//                         alert(error.response.data.meta.message);\n//                         Router.push('/');\n//                         break;\n//                     default:\n//                         alert(error.response.data.meta.message);\n//                         break;\n//                 }\n//             });\n//     };\n// };\nexport var getProduct = function getProduct(id) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get(\"https://fakestoreapi.com/products\");\n\n            case 2:\n              res = _context.sent;\n              dispatch({\n                type: PRO_LIST,\n                payload: res.data\n              }); // return { products: res.data }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport default {\n  getProduct: getProduct\n};","map":{"version":3,"sources":["D:/React/next-struc/store/actions/product.tsx"],"names":["axios","PRO_LIST","getProduct","id","dispatch","get","res","type","payload","data"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAQ;AAC9B;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACeJ,KAAK,CAACK,GAAN,qCADf;;AAAA;AACGC,cAAAA,GADH;AAEHF,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEN,QAAR;AAAkBO,gBAAAA,OAAO,EAAEF,GAAG,CAACG;AAA/B,eAAD,CAAR,CAFG,CAGH;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAKH,CANM;AAQP,eAAe;AACXP,EAAAA,UAAU,EAAVA;AADW,CAAf","sourcesContent":["import Router from 'next/router';\r\nimport axios from 'axios';\r\nimport { PRO_LIST } from './ActionsTypes';\r\nimport { API } from '../../config';\r\n\r\n\r\n// const getProduct = (query: any, type: any) => {\r\n//     return (dispatch: any) => {\r\n//         axios.get(`https://fakestoreapi.com/products`)\r\n//             .then((response) => {\r\n//                 dispatch({ type: PRO_LIST, payload: response.data });\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.log(error, 'error.response');\r\n//                 switch (error.response.status) {\r\n//                     case 401:\r\n//                         Router.push('/');\r\n//                         break;\r\n//                     case 422:\r\n//                         alert(error.response.data.meta.message);\r\n//                         break;\r\n//                     case 500:\r\n//                         alert('Interval server error! Try again!');\r\n//                     case 503:\r\n//                         alert(error.response.data.meta.message);\r\n//                         Router.push('/');\r\n//                         break;\r\n//                     default:\r\n//                         alert(error.response.data.meta.message);\r\n//                         break;\r\n//                 }\r\n//             });\r\n//     };\r\n// };\r\n\r\nexport const getProduct = (id) => {\r\n    return async (dispatch: any) => {\r\n        const res = await axios.get(`https://fakestoreapi.com/products`);\r\n        dispatch({ type: PRO_LIST, payload: res.data });\r\n        // return { products: res.data }\r\n    }\r\n}\r\n\r\nexport default {\r\n    getProduct\r\n}\r\n"]},"metadata":{},"sourceType":"module"}