{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { TODO_ONCHANGE, TODO_ADD, TODO_DELETE } from '../actions/ActionsTypes';\nexport const initialState = {\n  // this is a TODO item which has one \"value\" property\n  item: {\n    value: ''\n  },\n  // this is a list of the TODO items\n  data: []\n};\nexport default ((state = initialState, action) => {\n  // receive the type and item, which is defined in the `actions/index.ts`\n  const {\n    type,\n    item\n  } = action;\n\n  switch (type) {\n    case TODO_ONCHANGE:\n      {\n        // BE CAREFUL!!!\n        // DON'T USE THE REFERENCE LIKE THIS:\n        //\n        //     state.item = item;\n        //     return state; // this `state` is \"previous\" state!\n        //\n        // Please create a new instance because that is a \"next\" state\n        //\n        return Object.assign({}, state, {\n          item\n        });\n      }\n\n    case TODO_ADD:\n      {\n        // if the `item.value` is empty, return the \"previous\" state (skip)\n        if (item.value === '') {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          // clear the `item.value`\n          item: {\n            value: ''\n          },\n          // create a new array instance and push the item\n          data: [...state.data, item]\n        });\n      }\n\n    case TODO_DELETE:\n      {\n        // don't use `state.data` directly\n        const {\n          data\n        } = state,\n              restState = _objectWithoutProperties(state, [\"data\"]); // `[...data]` means a new instance of the `data` array\n        // and filter them and remove the target TODO item\n\n\n        const updated = [...data].filter(_item => _item.value !== item.value);\n        return Object.assign({}, restState, {\n          data: updated\n        });\n      }\n    // do nothing\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["D:/React/next-struc/store/reducer/counterReducer.tsx"],"names":["TODO_ONCHANGE","TODO_ADD","TODO_DELETE","initialState","item","value","data","state","action","type","Object","assign","restState","updated","filter","_item"],"mappings":";;;;AAAA,SACIA,aADJ,EAEIC,QAFJ,EAGIC,WAHJ,QAIO,yBAJP;AAMA,OAAO,MAAMC,YAAY,GAAG;AACxB;AACAC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE;AADL,GAFkB;AAKxB;AACAC,EAAAA,IAAI,EAAE;AANkB,CAArB;AASP,gBAAe,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAuC;AAClD;AACA,QAAM;AACFC,IAAAA,IADE;AAEFL,IAAAA;AAFE,MAGFI,MAHJ;;AAKA,UAAQC,IAAR;AACI,SAAKT,aAAL;AAAoB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5BH,UAAAA;AAD4B,SAAzB,CAAP;AAGH;;AAED,SAAKH,QAAL;AAAe;AACX;AACA,YAAIG,IAAI,CAACC,KAAL,KAAe,EAAnB,EAAuB;AACnB,iBAAOE,KAAP;AACH;;AAED,eAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5B;AACAH,UAAAA,IAAI,EAAE;AACFC,YAAAA,KAAK,EAAE;AADL,WAFsB;AAK5B;AACAC,UAAAA,IAAI,EAAE,CACF,GAAIC,KAAK,CAACD,IADR,EAEFF,IAFE;AANsB,SAAzB,CAAP;AAWH;;AAED,SAAKF,WAAL;AAAkB;AACd;AACA,cAAM;AAAEI,UAAAA;AAAF,YAAyBC,KAA/B;AAAA,cAAiBK,SAAjB,4BAA+BL,KAA/B,YAFc,CAId;AACA;;;AACA,cAAMM,OAAO,GAAG,CAAC,GAAGP,IAAJ,EAAUQ,MAAV,CAAkBC,KAAD,IAAgBA,KAAK,CAACV,KAAN,KAAgBD,IAAI,CAACC,KAAtD,CAAhB;AAEA,eAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,SAAlB,EAA6B;AAChCN,UAAAA,IAAI,EAAEO;AAD0B,SAA7B,CAAP;AAGH;AAED;;AACA;AAAS;AACL,eAAON,KAAP;AACH;AAlDL;AAoDH,CA3DD","sourcesContent":["import {\r\n    TODO_ONCHANGE,\r\n    TODO_ADD,\r\n    TODO_DELETE,\r\n} from '../actions/ActionsTypes';\r\n\r\nexport const initialState = {\r\n    // this is a TODO item which has one \"value\" property\r\n    item: {\r\n        value: '',\r\n    },\r\n    // this is a list of the TODO items\r\n    data: [],\r\n};\r\n\r\nexport default (state = initialState, action: any) => {\r\n    // receive the type and item, which is defined in the `actions/index.ts`\r\n    const {\r\n        type,\r\n        item,\r\n    } = action;\r\n\r\n    switch (type) {\r\n        case TODO_ONCHANGE: {\r\n            // BE CAREFUL!!!\r\n            // DON'T USE THE REFERENCE LIKE THIS:\r\n            //\r\n            //     state.item = item;\r\n            //     return state; // this `state` is \"previous\" state!\r\n            //\r\n            // Please create a new instance because that is a \"next\" state\r\n            //\r\n            return Object.assign({}, state, {\r\n                item,\r\n            });\r\n        }\r\n\r\n        case TODO_ADD: {\r\n            // if the `item.value` is empty, return the \"previous\" state (skip)\r\n            if (item.value === '') {\r\n                return state;\r\n            }\r\n\r\n            return Object.assign({}, state, {\r\n                // clear the `item.value`\r\n                item: {\r\n                    value: '',\r\n                },\r\n                // create a new array instance and push the item\r\n                data: [\r\n                    ...(state.data),\r\n                    item,\r\n                ],\r\n            });\r\n        }\r\n\r\n        case TODO_DELETE: {\r\n            // don't use `state.data` directly\r\n            const { data, ...restState } = state;\r\n\r\n            // `[...data]` means a new instance of the `data` array\r\n            // and filter them and remove the target TODO item\r\n            const updated = [...data].filter((_item: any) => _item.value !== item.value);\r\n\r\n            return Object.assign({}, restState, {\r\n                data: updated,\r\n            });\r\n        }\r\n\r\n        // do nothing\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}