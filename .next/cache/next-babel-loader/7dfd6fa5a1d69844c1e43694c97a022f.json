{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\React\\\\next-struc\\\\components\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { TextField } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport React from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nexport default function Search() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var data = useSelector(function (state) {\n    return state.product;\n  });\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  React.useEffect(function () {}, []);\n  React.useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  var handleChange = function handleChange(value) {\n    console.log(value, 'çhange');\n  };\n\n  return (// <ClickAwayListener onClickAway={(e) => handleClickAway(e, index)} >\n    __jsx(Autocomplete, {\n      getOptionSelected: function getOptionSelected(option, value) {\n        return option.name === value.name;\n      },\n      getOptionLabel: function getOptionLabel(option) {\n        return option.name;\n      },\n      options: data && data.length > 0 ? data : [],\n      blurOnSelect: true,\n      freeSolo: true,\n      onChange: function onChange(event, newValue) {\n        return handleChange(newValue && newValue.hasOwnProperty('name') ? newValue.name : '');\n      } // inputValue={}\n      ,\n      onInputChange: function onInputChange(newValue, reason) {\n        if (reason.toLowerCase() === 'input') {\n          handleChange(newValue);\n        } else if (reason.toLowerCase() === 'clear') {\n          handleChange('');\n        }\n      },\n      renderInput: function renderInput(params) {\n        return __jsx(TextField, _extends({}, params, {\n          margin: \"normal\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 38\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }) // </ClickAwayListener>\n\n  );\n}\n\n_s(Search, \"E+PjwFHWWOM2a/oIR0BB97Drt/g=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["D:/React/next-struc/components/Search.tsx"],"names":["TextField","useDispatch","useSelector","React","Autocomplete","Search","dispatch","data","state","product","useState","options","setOptions","useEffect","open","handleChange","value","console","log","option","name","length","event","newValue","hasOwnProperty","reason","toLowerCase","params"],"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA6C,mBAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAOA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAAA;;AAC7B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAMM,IAAS,GAAGL,WAAW,CAAC,UAACM,KAAD;AAAA,WAAsBA,KAAK,CAACC,OAA5B;AAAA,GAAD,CAA7B;;AAF6B,wBAICN,KAAK,CAACO,QAAN,CAA8B,EAA9B,CAJD;AAAA;AAAA,MAItBC,OAJsB;AAAA,MAIbC,UAJa;;AAM7BT,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM,CAErB,CAFD,EAEG,EAFH;AAIAV,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AAClB,QAAI,CAACC,IAAL,EAAW;AACPF,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH;AACJ,GAJD,EAIG,CAACE,IAAD,CAJH;;AAKA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAgB;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAmB,QAAnB;AACH,GAFD;;AAGA,SACI;AACA,UAAC,YAAD;AACI,MAAA,iBAAiB,EAAE,2BAACG,MAAD,EAAcH,KAAd;AAAA,eAA6BG,MAAM,CAACC,IAAP,KAAgBJ,KAAK,CAACI,IAAnD;AAAA,OADvB;AAEI,MAAA,cAAc,EAAE,wBAACD,MAAD;AAAA,eAAiBA,MAAM,CAACC,IAAxB;AAAA,OAFpB;AAGI,MAAA,OAAO,EAAEb,IAAI,IAAIA,IAAI,CAACc,MAAL,GAAc,CAAtB,GAA0Bd,IAA1B,GAAiC,EAH9C;AAII,MAAA,YAAY,MAJhB;AAKI,MAAA,QAAQ,EAAE,IALd;AAMI,MAAA,QAAQ,EAAE,kBAACe,KAAD,EAAQC,QAAR;AAAA,eAAqBR,YAAY,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAZ,GAA8CD,QAAQ,CAACH,IAAvD,GAA8D,EAA/D,CAAjC;AAAA,OANd,CAOI;AAPJ;AAQI,MAAA,aAAa,EAAE,uBAACG,QAAD,EAAWE,MAAX,EAAsB;AAEjC,YAAIA,MAAM,CAACC,WAAP,OAAyB,OAA7B,EAAsC;AAClCX,UAAAA,YAAY,CAACQ,QAAD,CAAZ;AACH,SAFD,MAEO,IAAIE,MAAM,CAACC,WAAP,OAAyB,OAA7B,EAAsC;AACzCX,UAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;AACJ,OAfL;AAgBI,MAAA,WAAW,EAAE,qBAACY,MAAD;AAAA,eAAY,MAAC,SAAD,eAAeA,MAAf;AAAuB,UAAA,MAAM,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAZ;AAAA,OAhBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAoBI;;AApBJ;AAsBH;;GAxCuBtB,M;UACHJ,W,EACCC,W;;;KAFEG,M","sourcesContent":["import { TextField, ClickAwayListener } from \"@material-ui/core\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport React from \"react\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { RootState } from \"../store/reducer/rootReducer\";\r\ninterface CountryType {\r\n    name: string;\r\n}\r\n\r\n\r\nexport default function Search() {\r\n    const dispatch = useDispatch();\r\n    const data: any = useSelector((state: RootState) => state.product);\r\n\r\n    const [options, setOptions] = React.useState<CountryType[]>([]);\r\n\r\n    React.useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n    const handleChange = (value: any) => {\r\n        console.log(value, 'çhange');\r\n    }\r\n    return (\r\n        // <ClickAwayListener onClickAway={(e) => handleClickAway(e, index)} >\r\n        <Autocomplete\r\n            getOptionSelected={(option: any, value: any) => option.name === value.name}\r\n            getOptionLabel={(option: any) => option.name}\r\n            options={data && data.length > 0 ? data : []}\r\n            blurOnSelect\r\n            freeSolo={true}\r\n            onChange={(event, newValue) => handleChange(newValue && newValue.hasOwnProperty('name') ? newValue.name : '')}\r\n            // inputValue={}\r\n            onInputChange={(newValue, reason) => {\r\n\r\n                if (reason.toLowerCase() === 'input') {\r\n                    handleChange(newValue)\r\n                } else if (reason.toLowerCase() === 'clear') {\r\n                    handleChange('')\r\n                }\r\n            }}\r\n            renderInput={(params) => <TextField {...params} margin=\"normal\" />}\r\n        />\r\n        // </ClickAwayListener>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}