{"ast":null,"code":"import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE, USER } from './ActionsTypes';\nimport { API } from '../../config';\nimport { setCookie, removeCookie } from '../../utils/cookie'; // register user\n\nvar register = function register(userdata, type) {\n  if (type !== 'register') {\n    throw new Error('Wrong API call!');\n  }\n\n  return function (dispatch) {\n    var firstname = userdata.firstname,\n        lastname = userdata.lastname,\n        mobile_no = userdata.mobile_no,\n        email_id = userdata.email_id,\n        password = userdata.password,\n        confirm_password = userdata.confirm_password;\n    axios.post(\"\".concat(API, \"/\").concat(type), {\n      firstname: firstname,\n      lastname: lastname,\n      mobile_no: mobile_no,\n      email_id: email_id,\n      password: password,\n      confirm_password: confirm_password\n    }).then(function (response) {\n      Router.push('/signin');\n      console.log(response.data.meta.message);\n    })[\"catch\"](function (error) {\n      switch (error.response.status) {\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 401:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n}; // gets token from the api and stores it in the redux store and in cookie\n\n\nvar authenticate = function authenticate(userdata, type) {\n  if (type !== 'login') {\n    throw new Error('Wrong API call!');\n  }\n\n  return function (dispatch) {\n    var email_id = userdata.email_id,\n        password = userdata.password;\n    axios.post(\"\".concat(API, \"/\").concat(type), {\n      email_id: email_id,\n      password: password\n    }).then(function (response) {\n      console.log(response.data.data.user.token);\n      setCookie('token', response.data.data.user.token);\n      Router.push('/users');\n      dispatch({\n        type: AUTHENTICATE,\n        payload: response.data.data.user.token\n      });\n    })[\"catch\"](function (error) {\n      console.log(error);\n\n      switch (error.response.status) {\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 401:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n}; // gets the token from the cookie and saves it in the store\n\n\nvar reauthenticate = function reauthenticate(token) {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\n\nvar deauthenticate = function deauthenticate() {\n  return function (dispatch) {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n};\n\nvar getUser = function getUser(_ref, type) {\n  var token = _ref.token;\n  console.log(token);\n  return function (dispatch) {\n    axios.get(\"\".concat(API, \"/\").concat(type), {\n      headers: {\n        \"Authorization\": \"bearer \" + token\n      }\n    }).then(function (response) {\n      dispatch({\n        type: USER,\n        payload: response.data.data.user\n      });\n    })[\"catch\"](function (error) {\n      switch (error.response.status) {\n        case 401:\n          Router.push('/');\n          break;\n\n        case 422:\n          alert(error.response.data.meta.message);\n          break;\n\n        case 500:\n          alert('Interval server error! Try again!');\n\n        case 503:\n          alert(error.response.data.meta.message);\n          Router.push('/');\n          break;\n\n        default:\n          alert(error.response.data.meta.message);\n          break;\n      }\n    });\n  };\n};\n\nexport default {\n  register: register,\n  authenticate: authenticate,\n  reauthenticate: reauthenticate,\n  deauthenticate: deauthenticate,\n  getUser: getUser\n};","map":{"version":3,"sources":["/var/local/react/next-struc/store/actions/auth.tsx"],"names":["Router","axios","AUTHENTICATE","DEAUTHENTICATE","USER","API","setCookie","removeCookie","register","userdata","type","Error","dispatch","firstname","lastname","mobile_no","email_id","password","confirm_password","post","then","response","push","console","log","data","meta","message","error","status","alert","authenticate","user","token","payload","reauthenticate","deauthenticate","getUser","get","headers"],"mappings":"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","sourcesContent":["import Router from 'next/router';\r\nimport axios from 'axios';\r\nimport { AUTHENTICATE, DEAUTHENTICATE, USER } from './ActionsTypes';\r\nimport { API } from '../../config';\r\nimport { setCookie, removeCookie } from '../../utils/cookie';\r\n\r\n// register user\r\ninterface Dispatch {\r\n    type: string,\r\n    payload: any\r\n}\r\nconst register = (userdata: any, type: any) => {\r\n    if (type !== 'register') {\r\n        throw new Error('Wrong API call!');\r\n    }\r\n    return (dispatch: Dispatch) => {\r\n        const { firstname, lastname, mobile_no, email_id, password, confirm_password } = userdata\r\n        axios.post(`${API}/${type}`, { firstname, lastname, mobile_no, email_id, password, confirm_password })\r\n            .then((response) => {\r\n                Router.push('/signin');\r\n                console.log(response.data.meta.message);\r\n            })\r\n            .catch((error) => {\r\n                switch (error.response.status) {\r\n                    case 422:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                    case 401:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                    case 500:\r\n                        alert('Interval server error! Try again!');\r\n                        break;\r\n                    default:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                }\r\n            });\r\n    };\r\n};\r\n// gets token from the api and stores it in the redux store and in cookie\r\nconst authenticate = (userdata: any, type: string) => {\r\n    if (type !== 'login') {\r\n        throw new Error('Wrong API call!');\r\n    }\r\n    return (dispatch: Dispatch) => {\r\n        const { email_id, password } = userdata;\r\n        axios.post(`${API}/${type}`, { email_id, password })\r\n            .then((response) => {\r\n                console.log(response.data.data.user.token);\r\n                setCookie('token', response.data.data.user.token);\r\n                Router.push('/users');\r\n                dispatch({ type: AUTHENTICATE, payload: response.data.data.user.token });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                switch (error.response.status) {\r\n                    case 422:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                    case 401:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                    case 500:\r\n                        alert('Interval server error! Try again!');\r\n                        break;\r\n                    default:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                }\r\n\r\n            });\r\n    };\r\n};\r\n\r\n// gets the token from the cookie and saves it in the store\r\nconst reauthenticate = (token: any) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({ type: AUTHENTICATE, payload: token });\r\n    };\r\n};\r\n\r\n// removing the token\r\nconst deauthenticate = () => {\r\n    return (dispatch: Dispatch) => {\r\n        removeCookie('token');\r\n        Router.push('/');\r\n        dispatch({ type: DEAUTHENTICATE });\r\n    };\r\n};\r\n\r\nconst getUser = ({ token }: any, type: any) => {\r\n    console.log(token)\r\n    return (dispatch: Dispatch) => {\r\n        axios.get(`${API}/${type}`, {\r\n            headers: {\r\n                \"Authorization\": \"bearer \" + token\r\n            }\r\n        })\r\n            .then((response) => {\r\n                dispatch({ type: USER, payload: response.data.data.user });\r\n            })\r\n            .catch((error) => {\r\n                switch (error.response.status) {\r\n                    case 401:\r\n                        Router.push('/');\r\n                        break;\r\n                    case 422:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                    case 500:\r\n                        alert('Interval server error! Try again!');\r\n                    case 503:\r\n                        alert(error.response.data.meta.message);\r\n                        Router.push('/');\r\n                        break;\r\n                    default:\r\n                        alert(error.response.data.meta.message);\r\n                        break;\r\n                }\r\n            });\r\n    };\r\n};\r\n\r\n\r\nexport default {\r\n    register,\r\n    authenticate,\r\n    reauthenticate,\r\n    deauthenticate,\r\n    getUser,\r\n};"]},"metadata":{},"sourceType":"module"}