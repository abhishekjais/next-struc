{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\React\\\\next-struc\\\\components\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { TextField } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux';\nimport React from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function Search() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      options = _React$useState4[0],\n      setOptions = _React$useState4[1];\n\n  var loading = open && options.length === 0;\n  React.useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, countries;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://country.register.gov.uk/records.json?page-size=5000');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return sleep(1e3);\n\n            case 5:\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              countries = _context.sent;\n\n              if (active) {\n                setOptions(Object.keys(countries).map(function (key) {\n                  return countries[key].item[0];\n                }));\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(Autocomplete, {\n    id: \"asynchronous-demo\",\n    style: {\n      width: '100%'\n    },\n    open: open,\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      return option.name === value.name;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    options: options,\n    loading: loading,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Asynchronous\",\n        variant: \"outlined\",\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }\n          }, loading ? __jsx(CircularProgress, {\n            color: \"inherit\",\n            size: 20,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 44\n            }\n          }) : null, params.InputProps.endAdornment)\n        }),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  });\n}\n\n_s(Search, \"/E+vB8WIw1/EOwU+W4ps0xOs3Zg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["D:/React/next-struc/components/Search.tsx"],"names":["TextField","useDispatch","React","Autocomplete","CircularProgress","sleep","delay","Promise","resolve","setTimeout","Search","dispatch","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","undefined","fetch","response","json","countries","Object","keys","map","key","item","width","option","value","name","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import { TextField } from \"@material-ui/core\"\r\nimport { useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport React from \"react\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\ninterface CountryType {\r\n    name: string;\r\n}\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\nexport default function Search() {\r\n    const dispatch = useDispatch();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<CountryType[]>([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            const response = await fetch('https://country.register.gov.uk/records.json?page-size=5000');\r\n            await sleep(1e3); // For demo purposes.\r\n            const countries = await response.json();\r\n\r\n            if (active) {\r\n                setOptions(Object.keys(countries).map((key) => countries[key].item[0]) as CountryType[]);\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n    return (\r\n        <Autocomplete\r\n            id=\"asynchronous-demo\"\r\n            style={{ width: '100%' }}\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            getOptionSelected={(option, value) => option.name === value.name}\r\n            getOptionLabel={(option) => option.name}\r\n            options={options}\r\n            loading={loading}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Asynchronous\"\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}